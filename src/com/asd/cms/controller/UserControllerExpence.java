package com.asd.cms.controller;

import java.math.BigDecimal;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.asd.cms.model.Mail;
import com.asd.cms.model.TExpense;
import com.asd.cms.model.TUser;
import com.asd.cms.service.ExpenseService;
import com.asd.cms.service.HrService;
import com.asd.cms.service.MailService;
import com.asd.cms.service.UserService;
import com.asd.cms.util.Utilities;
import com.google.gson.Gson;

@Controller
@RequestMapping("/main")
public class UserControllerExpence{
	
	@Autowired
	private ExpenseService expenseService;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private HrService hrService;
	 
	@Autowired
	private MailService mailService;
	
	@RequestMapping(value="/expense", method=RequestMethod.GET)
	public String showHomeView(Model model){

		TExpense expense = new TExpense();
		List<TExpense> expenseList = expenseService.getEmployeeInfo(Utilities.getCurrentLoginID());
	
		BigDecimal total = new BigDecimal(0);
		for (TExpense tExpense : expenseList) {
			
			total = total.add(tExpense.expenseAmount);
		}
		model.addAttribute("expense", expense);
		model.addAttribute("expenseList", expenseList);
		model.addAttribute("total",total);
		
		return "ExpenseEntryPage";
	}
	
	@RequestMapping(value="/expense", method=RequestMethod.POST)
	public String saveExpense(@ModelAttribute("expense") TExpense expense){
		
		expense.setExpenseStatus(0);
		expense.setExpenseEmployeeId(Utilities.getCurrentLoginID());
		//expense.setExpenseDepartment();
		try{
			
			expenseService.insert(expense);
			
		}catch(Exception e) {
			
			e.printStackTrace();
		}
		
		return "redirect:/main/expense";
	}
	
	@RequestMapping(value="/delete/{id}",method = RequestMethod.GET)
	public String deleteEmployee(@PathVariable("id") String id) {
		
		try {
			//System.out.println("id: "+id);
			TExpense texpense = new TExpense();
			texpense.setExpenseId(Integer.parseInt(id));
			expenseService.delete(texpense);
			
		}catch(Exception e) {
			
			e.printStackTrace();
		}
		
		return "redirect:/main/expense";
	}
	
	@RequestMapping(value="/submit", method=RequestMethod.POST)
	private @ResponseBody String updateStatus(@RequestParam("id") String idArray) throws ParseException{
		
		Gson gson = new Gson();

		List<Double> idList = gson.fromJson(idArray, List.class);
		for(double id: idList) {
			
			 expenseService.updateStatusDate((long)id);
			 
		}
		TUser user = userService.getUserByEmployeeID(Utilities.getCurrentLoginID());
		
		String a[] = null;
		String subject = "Conveyance Entry by ";
		String text1 = "Dear Sir, Conveyance entry has been generated by ";
		String text2 = ").Please accept this entry.To approve this request please click following link http://192.168.1.2:9090/CMS/auth/login";
		
		if(!(idList.isEmpty())) {
			
			if(user.getUserDepartment().equalsIgnoreCase("Software")) {
				
				mailService.sendMail(user.userEmail,Mail.MAIL_ADDRESS_ADMIN_SOFTWARE,a ,subject+userService.getUserByEmployeeID(Utilities.getCurrentLoginID()).getUserFullName()+"(ID: "+Utilities.getCurrentLoginID()+")",text1+userService.getUserByEmployeeID(Utilities.getCurrentLoginID()).getUserFullName()+"(ID: "+Utilities.getCurrentLoginID()+text2);
			}
			else if(user.getUserDepartment().equalsIgnoreCase("E-media")) {
				
				mailService.sendMail(user.userEmail,Mail.MAIL_ADDRESS_ADMIN_EMEDIA,a,subject+userService.getUserByEmployeeID(Utilities.getCurrentLoginID()).getUserFullName()+"(ID: "+Utilities.getCurrentLoginID()+")",text1+userService.getUserByEmployeeID(Utilities.getCurrentLoginID()).getUserFullName()+"(ID: "+Utilities.getCurrentLoginID()+text2);
			}
			else if(user.getUserDepartment().equalsIgnoreCase("All")) {
				
				mailService.sendMail(user.userEmail,Mail.MAIL_ADDRESS_ADMIN_All,a,subject+userService.getUserByEmployeeID(Utilities.getCurrentLoginID()).getUserFullName()+"(ID: "+Utilities.getCurrentLoginID()+")",text1+userService.getUserByEmployeeID(Utilities.getCurrentLoginID()).getUserFullName()+"(ID: "+Utilities.getCurrentLoginID()+text2);
			}
		}
		
		return gson.toJson("Success");
	}

	@RequestMapping(value="/userConveyanceView",method=RequestMethod.GET)
	private String ConveyanceViewEntry(Model model) {
		
		List<TExpense> expenseList = new ArrayList<TExpense>();
		
		model.addAttribute("expenseList",expenseList);
		
		return "UserConveyanceViewPage";
	}
	@RequestMapping(value="/userConveyanceView",method=RequestMethod.POST)
	private String ConveyanceView(Model model,@RequestParam("expenseDateFrom") String dateFrom, @RequestParam("expenseDateTo") String dateTo) {
		List<TExpense> expenseList = new ArrayList<TExpense>();
		try{
			dateFrom = dateFrom + " 00:00:00:000"; //For fetching data from db as HH:MM:SS:YYY
			dateTo = dateTo + " 23:59:59:999";  //For fetching data from db as HH:MM:SS:YYY
			String loginId = Utilities.getCurrentLoginID();
			expenseList =  expenseService.getConveyanceViewDetails(dateFrom, dateTo,loginId);
			
			/*for (TExpense tExpense : expenseList) {
				System.out.println(tExpense.getExpenseStatus());
			}*/
		}catch(Exception e){
			
			e.printStackTrace();
		}
		model.addAttribute("expenseList",expenseList);
		return "UserConveyanceViewPage";
	}
	
	@RequestMapping(value="/resetPassword",method=RequestMethod.GET)
	public String PasswordResetPage() {
		
		return "PasswordResetPage";
	}
	@RequestMapping(value="/resetPassword",method=RequestMethod.POST)
	public String PasswordReset(Model model,@RequestParam("currentPassword") String currentPassword,@RequestParam("newPassword") String newPassword,@RequestParam("retypeNewPassword") String retypeNewPassword) {
		
		TUser user = userService.getUserByLoginID(Utilities.getCurrentLoginID());
		String userPassword = user.getUserPassword();
		//System.out.println("Current Password: "+userPassword);
		//System.out.println("New Password: "+newPassword);
		//System.out.println("Retype New Password: "+retypeNewPassword);
		String mismatch = "Your previous password doesn't match.";
		String mismatchNew = "Your new password and retyped password doesn't match.";
		String match = "Congratulation! You have successfully changed your password.";
		if(!(userPassword.equals(currentPassword))) {
			
			model.addAttribute("mismatchedPassword",mismatch);
		}
		else {
			if(!(newPassword.equals(retypeNewPassword))){
				
				model.addAttribute("mismatchedNewPassword",mismatchNew);
			}
			else {
				user.setUserPassword(retypeNewPassword);
				hrService.SaveOrUpdate(user);
				model.addAttribute("matchedNewPassword",match);
			}
		}
				
		return "PasswordResetPage";
	}
}
