package com.asd.cms.controller;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.asd.cms.model.Mail;
import com.asd.cms.model.TExpense;
import com.asd.cms.model.TRequisition;
import com.asd.cms.model.TUser;
import com.asd.cms.service.ExpenseService;
import com.asd.cms.service.MailService;
import com.asd.cms.service.RequisitionService;
import com.asd.cms.service.UserService;
import com.asd.cms.util.Utilities;
import com.google.gson.Gson;


@Controller
@RequestMapping("/main")
public class UserControllerRequisition {
	
	@Autowired
	private RequisitionService requisitionService;
	@Autowired
	private UserService userService;
	@Autowired
	private MailService mailService;
	
	@RequestMapping(value="/requisition", method=RequestMethod.GET)
	public String showHomeView(Model model){
		
		TRequisition requisition = new TRequisition();
		List<TRequisition> requisitionList = requisitionService.getEmployeeInfo(Utilities.getCurrentLoginID());
		
		model.addAttribute("requisition", requisition);
		model.addAttribute("requisitionList", requisitionList);
		
		return "RequisitionEntryPage";
	}
	
	@RequestMapping(value="/requisition", method=RequestMethod.POST)
	public String saveRequisition(@ModelAttribute("requisition") TRequisition requisition){
		
		try{
			
			requisition.setReqStatus(0);
			requisition.setReqEmployeeId(Utilities.getCurrentLoginID());
			requisitionService.insert(requisition);
			
		}catch(Exception e) {
			
			e.printStackTrace();
		}
		
		return "redirect:/main/requisition";
	}
	
	@RequestMapping(value="/deleteReq/{id}",method = RequestMethod.GET)
	public String deleteEmployee(@PathVariable("id") String id) {
		
		try {
			
			TRequisition trequisition = new TRequisition();
			trequisition.setReqId(Integer.parseInt(id));
			requisitionService.delete(trequisition);
			
		}catch(Exception e) {
			
			e.printStackTrace();
		}
		
		return "redirect:/main/requisition";
	}
	
	@RequestMapping(value="/submitReq", method=RequestMethod.POST)
	private @ResponseBody String updateStatus(@RequestParam("id") String idArray) throws ParseException{
		
		Gson gson = new Gson();

		List<Double> idList = gson.fromJson(idArray, List.class);
		for(double id: idList) {
			
			requisitionService.updateStatusDate((long)id);
			 
		}
		TUser user = userService.getUserByEmployeeID(Utilities.getCurrentLoginID());
		
		String a[] = null;
		String subject = "Requisition Entry by ";
		String text1 = "Dear Sir, Requisition entry has been generated by ";
		String text2 = ").Please accept this entry.To approve this request please click following link http://192.168.1.2:9090/CMS/auth/login";
		
		if(!(idList.isEmpty())) {
			
			if(user.getUserDepartment().equalsIgnoreCase("Software")) {
				
				mailService.sendMail(user.userEmail,Mail.MAIL_ADDRESS_ADMIN_SOFTWARE,a ,subject+userService.getUserByEmployeeID(Utilities.getCurrentLoginID()).getUserFullName()+"(ID: "+Utilities.getCurrentLoginID()+")",text1+userService.getUserByEmployeeID(Utilities.getCurrentLoginID()).getUserFullName()+"(ID: "+Utilities.getCurrentLoginID()+text2);
			}
			else if(user.getUserDepartment().equalsIgnoreCase("E-media")) {
				
				mailService.sendMail(user.userEmail,Mail.MAIL_ADDRESS_ADMIN_EMEDIA,a,subject+userService.getUserByEmployeeID(Utilities.getCurrentLoginID()).getUserFullName()+"(ID: "+Utilities.getCurrentLoginID()+")",text1+userService.getUserByEmployeeID(Utilities.getCurrentLoginID()).getUserFullName()+"(ID: "+Utilities.getCurrentLoginID()+text2);
			}
			else if(user.getUserDepartment().equalsIgnoreCase("All")) {
				
				mailService.sendMail(user.userEmail,Mail.MAIL_ADDRESS_ADMIN_All,a,subject+userService.getUserByEmployeeID(Utilities.getCurrentLoginID()).getUserFullName()+"(ID: "+Utilities.getCurrentLoginID()+")",text1+userService.getUserByEmployeeID(Utilities.getCurrentLoginID()).getUserFullName()+"(ID: "+Utilities.getCurrentLoginID()+text2);
			}
		}
		
		return gson.toJson("Success");
	}
	
	@RequestMapping(value="/userRequisitionView",method=RequestMethod.GET)
	private String RequisitionViewEntry(Model model) {
		
		List<TRequisition> requisitionList = new ArrayList<TRequisition>();
		
		model.addAttribute("requisitionList",requisitionList);
		
		return "UserRequisitionViewPage";
	}
	
	@RequestMapping(value="/userRequisitionView",method=RequestMethod.POST)
	private String ConveyanceView(Model model,@RequestParam("reqDateFrom") String reqDateFrom, @RequestParam("reqDateTo") String reqDateTo) {
		
		List<TRequisition> requisitionList = new ArrayList<TRequisition>();
		try{
			
			reqDateFrom = reqDateFrom + " 00:00:00:000"; //For fetching data from db as HH:MM:SS:YYY
			reqDateTo = reqDateTo + " 23:59:59:999";  //For fetching data from db as HH:MM:SS:YYY
			String loginId = Utilities.getCurrentLoginID();
			requisitionList =  requisitionService.getRequisitionViewDetails(reqDateFrom, reqDateTo, loginId);

		}catch(Exception e){
			
			e.printStackTrace();
		}
		model.addAttribute("requisitionList",requisitionList);
		return "UserRequisitionViewPage";
	}
}
